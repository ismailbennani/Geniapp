@page "/"
@inject ServiceInformation CurrentServiceInformation
@inject MonitorServices MonitorServices
@inject IServiceScopeFactory ScopeFactory
@inject ILogger<Home> Logger
@implements IDisposable
@using System.Data
@using System.Drawing
@using Geniapp.Frontend.Components.Components
@using Geniapp.Infrastructure.Database
@using Geniapp.Infrastructure.Database.MasterDatabase
@using Geniapp.Infrastructure.Database.ShardDatabase
@using Geniapp.Infrastructure.MessageQueue.HealthCheck
@using Microsoft.EntityFrameworkCore
@implements IAsyncDisposable
@rendermode InteractiveServer

<PageTitle>Geniapp</PageTitle>

@{
    string currentServiceColorHtml = ColorTranslator.ToHtml(Color.FromArgb(GetColor(CurrentServiceInformation.ServiceId).ToArgb()));
}

<div class="w-100 h-100 d-flex flex-column border border-4 overflow-y-auto overflow-x-hidden" style="box-sizing:border-box;border-color:@currentServiceColorHtml!important">
    <div class="small text-muted p-1">
        <span class="fw-semibold">frontend service:</span> @CurrentServiceInformation.Name
    </div>

    <div class="p-2">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Services</h5>
                <div class="card-text d-flex flex-column gap-1">
                    @foreach (ServiceType type in new[] { ServiceType.Master, ServiceType.Frontend, ServiceType.Worker })
                    {
                        ServiceInformation[] activeServices = MonitorServices.ActiveServices.Where(s => s.Type == type).ToArray();
                        ServiceInformation[] inactiveServices = MonitorServices.InactiveServices.Where(s => s.Type == type).ToArray();

                        <div class="row small">
                            <div class="col-1 fw-semibold text-truncate">
                                @(type) (@activeServices.Length):
                            </div>
                            <div class="col d-flex flex-wrap column-gap-2">
                                @if (activeServices.Length == 0 && inactiveServices.Length == 0)
                                {
                                    <span class="text-muted">(none)</span>
                                }
                                else
                                {
                                    @foreach (ServiceInformation service in activeServices)
                                    {
                                        <ServiceView Service="service" Color="@(type == ServiceType.Master ? null : _colorTable.GetValueOrDefault(service.ServiceId))"/>
                                    }

                                    @foreach (ServiceInformation service in inactiveServices)
                                    {
                                        <ServiceView Service="service" Color="@(type == ServiceType.Master ? null : _colorTable.GetValueOrDefault(service.ServiceId))" Inactive/>
                                    }
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="p-2">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Shards</h5>
                <div class="card-text">
                    @foreach (Shard shard in _shards.Values)
                    {
                        <div class="pt-2">
                            <ShardView Shard="shard" Data="@(_tenantsData.GetValueOrDefault(shard.Id) ?? [])" ColorTable="_colorTable" TileSize="_tileSize"/>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    Dictionary<Guid, Shard> _shards = [];
    readonly Dictionary<Guid, TenantData[]> _tenantsData = [];
    readonly Dictionary<Guid, Color> _colorTable = [];
    int _tileSize;
    Timer? _periodicRefresh;

    protected override async Task OnInitializedAsync()
    {
        using IServiceScope scope = ScopeFactory.CreateScope();
        await using MasterDbContext masterDbContext = scope.ServiceProvider.GetRequiredService<MasterDbContext>();

        await using (await masterDbContext.Database.BeginTransactionAsync(IsolationLevel.ReadUncommitted))
        {
            _shards = await masterDbContext.Shards.AsNoTracking().ToDictionaryAsync(s => s.Id, s => s);
        }

        RefreshColorTable();
        await RefreshAllTenantsDataAsync();

        _periodicRefresh = new Timer(
            _ =>
            {
                RefreshColorTable();
                RefreshAllTenantsDataAsync().GetAwaiter().GetResult();
            },
            null,
            250,
            250
        );
    }

    void RefreshColorTable()
    {
        foreach (Guid id in MonitorServices.ActiveServices.Select(s => s.ServiceId).Concat(MonitorServices.InactiveServices.Select(s => s.ServiceId)).Except(_colorTable.Keys))
        {
            _colorTable[id] = GetColor(id);
        }
    }

    async Task RefreshAllTenantsDataAsync()
    {
        try
        {
            using IServiceScope scope = ScopeFactory.CreateScope();
            await using MasterDbContext masterDbContext = scope.ServiceProvider.GetRequiredService<MasterDbContext>();
            ShardContextProvider shardContextProvider = scope.ServiceProvider.GetRequiredService<ShardContextProvider>();

            int totalTenantsCount = 0;
            foreach (Shard shard in _shards.Values)
            {
                ShardDbContext? context = await shardContextProvider.GetShardContextAsync(shard.Name);
                if (context == null)
                {
                    continue;
                }

                await using ShardDbContext _ = context;

                TenantData[] tenantsOfShard = await context.TenantsData.AsNoTracking().Include(tenantData => tenantData.Tenant).ToArrayAsync();
                _tenantsData[shard.Id] = tenantsOfShard;
                totalTenantsCount += tenantsOfShard.Length;
            }

            _tileSize = GetTileSize(totalTenantsCount);
        }
        catch (Exception exn)
        {
            Logger.LogError(exn, "An unexpected error has occurred while refreshing tenants data");
        }

        await InvokeAsync(StateHasChanged);
    }

    static Color GetColor(Guid id) => Color.FromArgb(id.GetHashCode());

    static int GetTileSize(int tenantsCount)
    {
        if (tenantsCount > 5000)
        {
            return 8;
        }

        if (tenantsCount > 500)
        {
            return 16;
        }

        if (tenantsCount > 50)
        {
            return 32;
        }

        if (tenantsCount > 5)
        {
            return 64;
        }

        return 128;
    }

    public void Dispose() => _periodicRefresh?.Dispose();

    public async ValueTask DisposeAsync()
    {
        if (_periodicRefresh != null)
            await _periodicRefresh.DisposeAsync();
    }

}