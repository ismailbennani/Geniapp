@page "/"
@inject CurrentServiceInformation CurrentServiceInformation
@inject IServiceScopeFactory ScopeFactory
@implements IDisposable
@using System.Data
@using System.Drawing
@using Geniapp.Infrastructure
@using Geniapp.Infrastructure.Database
@using Geniapp.Infrastructure.Database.MasterDatabase
@using Geniapp.Infrastructure.Database.ShardDatabase
@using Microsoft.EntityFrameworkCore
@implements IAsyncDisposable
@rendermode InteractiveServer

<PageTitle>Geniapp</PageTitle>

@{
    string currentServiceColorHtml = ColorTranslator.ToHtml(Color.FromArgb(GetColor(CurrentServiceInformation.ServiceId).ToArgb()));
}

<div class="w-100 h-100 d-flex flex-column border border-4 overflow-auto" style="box-sizing:border-box;border-color:@currentServiceColorHtml!important">
    <div class="small text-muted p-1">
        <span class="fw-semibold">frontend service:</span> @CurrentServiceInformation.Name
    </div>

    <div class="p-2">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Workers</h5>
                <div class="card-text d-flex gap-2">
                    @{
                        var workers = _workersLastWork.Select((kv, i) => new { WorkerId = kv.Key, LastWorkTime = kv.Value, Name = kv.Key }).OrderByDescending(x => x.LastWorkTime).ToArray();
                        @foreach (var worker in workers)
                        {
                            Color color = GetColor(worker.WorkerId);
                            string colorHtml = ColorTranslator.ToHtml(Color.FromArgb(color.ToArgb()));

                            <div class="d-flex gap-1 align-items-center justify-content-center">
                                <div style="width:16px;height:16px;background-color:@colorHtml"></div>
                                @worker.Name
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>

    <hr class="p-0 m-0"/>

    <div class="p-1">
        @foreach (Shard shard in _shards.Values)
        {
            <div class="p-2">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@shard.Name</h5>
                        <div class="card-text d-flex">
                            <div class="d-flex flex-wrap align-items-center border border-1 border-bottom-0 border-end-0">
                                @foreach (TenantShardAssociation tenantAssociation in _shardTenants.GetValueOrDefault(shard.Id) ?? [])
                                {
                                    TenantData? data = _tenantsData.GetValueOrDefault(tenantAssociation.TenantId);
                                    string color = data?.LastWorkerId == null ? "#D3D3D3" : ColorTranslator.ToHtml(Color.FromArgb(GetColor(data.LastWorkerId.Value).ToArgb()));

                                    bool hasBeenUpdatedInLastTick = data != null && data.LastWorkerId.HasValue && _tenantUpdatedInLastTick.Contains(data.Tenant.Id);
                                    string activeClass = hasBeenUpdatedInLastTick ? "active" : "inactive";

                                    <div class="border border-1 border-top-0 border-start-0 text-truncate @activeClass" style="width:@(_tileSize)px;height:@(_tileSize)px;background-color:@color">
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {

    Dictionary<Guid, Shard> _shards = [];
    Dictionary<Guid, TenantShardAssociation> _tenantAssociations = [];
    Dictionary<Guid, IReadOnlyCollection<TenantShardAssociation>> _shardTenants = [];
    readonly Dictionary<Guid, TenantData> _tenantsData = [];
    Dictionary<Guid, DateTime> _workersLastWork = [];
    readonly HashSet<Guid> _tenantUpdatedInLastTick = [];
    int _tileSize;
    Timer? _periodicRefresh;

    protected override async Task OnInitializedAsync()
    {
        using IServiceScope scope = ScopeFactory.CreateScope();
        await using MasterDbContext masterDbContext = scope.ServiceProvider.GetRequiredService<MasterDbContext>();

        await using (await masterDbContext.Database.BeginTransactionAsync(IsolationLevel.ReadUncommitted))
        {
            _shards = await masterDbContext.Shards.AsNoTracking().ToDictionaryAsync(s => s.Id, s => s);
            _tenantAssociations = await masterDbContext.TenantShardAssociations.Include(a => a.Shard).AsNoTracking().ToDictionaryAsync(a => a.TenantId, a => a);
            _shardTenants = _tenantAssociations.GroupBy(kv => kv.Value.Shard.Id).ToDictionary(g => g.Key, IReadOnlyCollection<TenantShardAssociation> (g) => g.Select(kv => kv.Value).ToArray());
        }

        _tileSize = GetTileSize(_tenantAssociations.Count);

        await RefreshAllTenantsDataAsync(true);
        _periodicRefresh = new Timer(_ => RefreshAllTenantsDataAsync(false).GetAwaiter().GetResult(), null, 250, 250);
    }

    async Task RefreshAllTenantsDataAsync(bool firstRun)
    {
        using IServiceScope scope = ScopeFactory.CreateScope();
        await using MasterDbContext masterDbContext = scope.ServiceProvider.GetRequiredService<MasterDbContext>();
        ShardContextProvider shardContextProvider = scope.ServiceProvider.GetRequiredService<ShardContextProvider>();

        _tenantUpdatedInLastTick.Clear();
        DateTime mostRecentWork = _workersLastWork.Select(w => w.Value).DefaultIfEmpty(DateTime.MinValue).Max();

        foreach (Shard shard in _shards.Values)
        {
            ShardDbContext? context = await shardContextProvider.GetShardContextAsync(shard.Name);
            if (context == null)
            {
                continue;
            }

            await using ShardDbContext _ = context;

            TenantData[] tenantsData = await context.TenantsData.AsNoTracking().Include(tenantData => tenantData.Tenant).Where(d => d.LastModificationDate >= mostRecentWork).ToArrayAsync();
            foreach (TenantData data in tenantsData)
            {
                _tenantsData[data.Tenant.Id] = data;

                if (!firstRun)
                {
                    _tenantUpdatedInLastTick.Add(data.Tenant.Id);
                }
            }
        }

        _workersLastWork = _tenantsData.Values.Where(d => d.LastWorkerId.HasValue).GroupBy(d => d.LastWorkerId!.Value).ToDictionary(g => g.Key, g => g.Max(d => d.LastModificationDate));

        await InvokeAsync(StateHasChanged);
    }

    static Color GetColor(Guid id) => Color.FromArgb(id.GetHashCode());

    static int GetTileSize(int tenantsCount)
    {
        if (tenantsCount > 5000)
        {
            return 16;
        }

        if (tenantsCount > 500)
        {
            return 32;
        }

        if (tenantsCount > 50)
        {
            return 64;
        }

        if (tenantsCount > 5)
        {
            return 128;
        }

        return 256;
    }

    public void Dispose() => _periodicRefresh?.Dispose();

    public async ValueTask DisposeAsync()
    {
        if (_periodicRefresh != null)
            await _periodicRefresh.DisposeAsync();
    }

}